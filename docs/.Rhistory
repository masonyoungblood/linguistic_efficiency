#load data from repository for Youngblood & Lahti (2022)
load(url("https://github.com/masonyoungblood/TransmissionBias/raw/master/example/data.RData"))
#load processed data
load("data_models/processed_data.RData")
data <- processed_data$data
data
data$cluster_2
clusters <- data$cluster_2
unique(clusters)
sort(unique(clusters))
which(clusters == )
which(clusters == 1)
which(clusters == 2)
which(clusters == 3)
data$duration[which(clusters == 3)]
median(data$duration[which(clusters == 3)])
median(data$duration[which(clusters == 3)])
median(data$duration[which(clusters == 3)])
durs <- sapply(types, function(x){median(data$duration[which(clusters == x)])})
types <- sort(unique(clusters))
durs <- sapply(types, function(x){median(data$duration[which(clusters == x)])})
durs
hist(durs)
plot(density(durs))
plot(density(data$duration))
plot(density(data$duration), xlim = c(0, 400))
plot(density(durs), xlim = c(0, 400))
prop_each_dur <- function(cluster = 2){
if(cluster == 0){clusters <- data$cluster_0}
if(cluster == 1){clusters <- data$cluster_1}
if(cluster == 2){clusters <- data$cluster_2}
if(cluster == 3){clusters <- data$cluster_3}
if(cluster == 4){clusters <- data$cluster_4}
types <- sort(unique(clusters))
durs <- sort(sapply(types, function(x){median(data$duration[which(clusters == x)])}))
return(durs)
}
durations_per_cluster <- lapply(2:4, function(x){
if(cluster == 0){clusters <- data$cluster_0}
if(cluster == 1){clusters <- data$cluster_1}
if(cluster == 2){clusters <- data$cluster_2}
if(cluster == 3){clusters <- data$cluster_3}
if(cluster == 4){clusters <- data$cluster_4}
types <- sort(unique(clusters))
durs <- sort(sapply(types, function(x){median(data$duration[which(clusters == x)])}))
return(durs)
})
durations_per_cluster <- lapply(2:4, function(x){
if(x == 0){clusters <- data$cluster_0}
if(x == 1){clusters <- data$cluster_1}
if(x == 2){clusters <- data$cluster_2}
if(x == 3){clusters <- data$cluster_3}
if(x == 4){clusters <- data$cluster_4}
types <- sort(unique(clusters))
durs <- sort(sapply(types, function(y){median(data$duration[which(clusters == y)])}))
return(durs)
})
durations_per_cluster
durations_per_cluster[1]
durations_per_cluster[[1]]
plot(density(durations_per_cluster[[1]]), xlim = c(0, 400))
plot(density(durations_per_cluster[[2]]), xlim = c(0, 400))
plot(density(durations_per_cluster[[3]]), xlim = c(0, 400))
durations_per_cluster <- lapply(2:4, function(x){
if(x == 0){clusters <- data$cluster_0}
if(x == 1){clusters <- data$cluster_1}
if(x == 2){clusters <- data$cluster_2}
if(x == 3){clusters <- data$cluster_3}
if(x == 4){clusters <- data$cluster_4}
types <- sort(unique(clusters))
durs <- sort(sapply(types, function(y){mean(data$duration[which(clusters == y)])}))
return(durs)
})
plot(density(durations_per_cluster[[1]]), xlim = c(0, 400))
plot(density(durations_per_cluster[[2]]), xlim = c(0, 400))
plot(density(durations_per_cluster[[3]]), xlim = c(0, 400))
plot(density(durations_per_cluster[[3]]), xlim = c(0, 600))
plot(density(durations_per_cluster[[1]]), xlim = c(0, 600))
plot(density(durations_per_cluster[[2]]), xlim = c(0, 600))
plot(density(durations_per_cluster[[3]]), xlim = c(0, 600))
median(durations_per_cluster[[1]])
median(durations_per_cluster[[2]])
median(durations_per_cluster[[3]])
durations_per_cluster <- lapply(0:4, function(x){
if(x == 0){clusters <- data$cluster_0}
if(x == 1){clusters <- data$cluster_1}
if(x == 2){clusters <- data$cluster_2}
if(x == 3){clusters <- data$cluster_3}
if(x == 4){clusters <- data$cluster_4}
types <- sort(unique(clusters))
durs <- sort(sapply(types, function(y){mean(data$duration[which(clusters == y)])}))
return(durs)
})
sapply(1:5, function(x){median(durations_per_cluster[[x]])})
sapply(1:5, function(x){median(durations_per_cluster[[x]])})
