})
#get proportion of exact matches that were retrieved (18%)
exact_matched <- length(which(sapply(matched, nrow) != 0))/length(matched)
exact_matched
matched
as.character(names(table(songs_used$Region)))
as.character(names(table(INI_all$Region)))
exact_matched
matched
do.call(rbind, matched)
#restructure exact matches for analysis
lapply(1:length(matched), function(x){return(data.frame(duration = matched[[x]]$INI, sequence = x))})
matched[[x]]$INI
x <- 1
matched[[x]]$INI
x
#restructure exact matches for analysis
lapply(1:length(matched), function(x){return(data.frame(duration = matched[[x]]$INI, sequence = x))})
library(dplyr)
library(flextable)
#load table
load("../data_models/mi_models_bout_level.RData")
mi_models_bout_level
mi_models_bout_level$wilcox
mi_models_bout_level$wilcox[[1]]$p.value
mi_models_bout_level$wilcox[[1]]$p.value
mi_models_bout_level$wilcox[[1]]$p.value
mi_models_bout_level$wilcox[[1]]$p.value
sapply(1:3, function(x){mi_models_bout_level$wilcox[[1]]$p.value})
sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value})
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value})
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level
round(mi_models_bout_level, 2)
format(mi_models_bout_level, scientific = TRUE, digits = 2)
format(mi_models_bout_level, scientific = TRUE, digits = 2)
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
cbind(c("Wilcoxon signed-rank test", "t-text"), mi_models_bout_level)
cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
as.data.frame(mi_models_bout_level)
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
mi_models_bout_level <- cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
as.data.frame(mi_models_bout_level)
mi_models_bout_level <- as.data.frame(mi_models_bout_level)
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
mi_models_bout_level <- cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
mi_models_bout_level <- as.data.frame(mi_models_bout_level)
colnames(mi_models_bout_level) <- c("", "DS: 2", "DS: 3", "DS: 4")
flextable(mi_models_bout_level) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The WAIC values for the exponential, power-law, and composite models applied to the mutual information calculated from individual song sequences rather than from concatenated song bouts. The exponential model outcompetes both alternatives at deep split values of 3 and 4, while the power-law and composite models outcompete the exponential model at deep split of 2.")
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
mi_models_bout_level <- cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
mi_models_bout_level <- as.data.frame(mi_models_bout_level)
colnames(mi_models_bout_level) <- c("", "DS: 2", "DS: 3", "DS: 4")
flextable(mi_models_bout_level) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The WAIC values for the exponential, power-law, and composite models applied to the mutual information calculated from individual song sequences rather than from concatenated song bouts. The exponential model outcompetes both alternatives at deep split values of 3 and 4, while the power-law and composite models outcompete the exponential model at deep split of 2.")
mi_models_bout_level
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
mi_models_bout_level <- cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
mi_models_bout_level <- as.data.frame(mi_models_bout_level)
colnames(mi_models_bout_level) <- c("", "DS: 2", "DS: 3", "DS: 4")
flextable(as.data.frame(mi_models_bout_level)) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The WAIC values for the exponential, power-law, and composite models applied to the mutual information calculated from individual song sequences rather than from concatenated song bouts. The exponential model outcompetes both alternatives at deep split values of 3 and 4, while the power-law and composite models outcompete the exponential model at deep split of 2.")
?flextable
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
mi_models_bout_level <- cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
mi_models_bout_level <- as.data.frame(mi_models_bout_level)
colnames(mi_models_bout_level) <- c("", "DS: 2", "DS: 3", "DS: 4")
rownames(mi_models_bout_level) <- NULL
flextable(mi_models_bout_level) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The WAIC values for the exponential, power-law, and composite models applied to the mutual information calculated from individual song sequences rather than from concatenated song bouts. The exponential model outcompetes both alternatives at deep split values of 3 and 4, while the power-law and composite models outcompete the exponential model at deep split of 2.")
names(mi_models_bout_level)
#load table
load("../data_models/mi_models_bout_level.RData")
#format table
mi_models_bout_level <- rbind(sapply(1:3, function(x){mi_models_bout_level$wilcox[[x]]$p.value}),
sapply(1:3, function(x){mi_models_bout_level$ttest[[x]]$p.value}))
mi_models_bout_level <- format(mi_models_bout_level, scientific = TRUE, digits = 2)
mi_models_bout_level <- cbind(c("Wilcoxon signed-rank test", "t-test"), mi_models_bout_level)
mi_models_bout_level <- as.data.frame(mi_models_bout_level)
colnames(mi_models_bout_level) <- c(" ", "DS: 2", "DS: 3", "DS: 4")
rownames(mi_models_bout_level) <- NULL
flextable(mi_models_bout_level) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The WAIC values for the exponential, power-law, and composite models applied to the mutual information calculated from individual song sequences rather than from concatenated song bouts. The exponential model outcompetes both alternatives at deep split values of 3 and 4, while the power-law and composite models outcompete the exponential model at deep split of 2.")
flextable(mi_models_bout_level) %>%
theme_vanilla() %>% set_table_properties(layout = "autofit") %>%
set_caption("The p-values from Wilcoxon signed-rank tests and t-tests comparing the amount of information contained in two \"dummy\" datasets: one that isolates the information contained in song bouts by shuffling syllable sequences within songs, and another that further shuffles song bout order within individuals. The first contains more information than the second (p < 0.05) across all three levels of granularity in syllable clustering.")
#load library
library(WGCNA)
install.packages("WGCNA")
#load library
library(WGCNA)
install.packages("GO.db")
install.packages("RSQLite")
install.packages("BiocManager")
BiocManager::install("WGCNA")
#load library
library(WGCNA)
BiocManager::install("GO.db")
#load library
library(WGCNA)
BiocManager::install("WGCNA")
BiocManager::install("WGCNA", force = TRUE)
#load library
library(WGCNA)
#load clustering data
load("data_models/clustering.RData")
load("data_models/hybrid_cut.RData")
#manage fonts
quartzFonts(avenir = c("Avenir Book", "Avenir", "Avenir", "Avenir"))
par(family = "avenir")
?pdf
pdf("plots/clustering.pdf", width = 6.8, height = 3.4)
plotDendroAndColors(clustering,
colors = matrix(c(hybrid_cut[[3]], hybrid_cut[[4]], hybrid_cut[[5]]), ncol = 3),
dendroLabels = FALSE, main = NULL, lwd = 0.5, ylab = "", yaxt = "n",
groupLabels = c("Deep Split: 2\n(114 Syllable Types)", "Deep Split: 3\n(596 Syllable Types)", "Deep Split: 4\n(1,646 Syllable Types)"),
hang = -1, addGuide = FALSE, marAll = c(0.3, 4.5, 0, 0), cex.colorLabels = 0.55)
dev.off()
svg("plots/clustering.svg", width = 6.8, height = 3.4)
plotDendroAndColors(clustering,
colors = matrix(c(hybrid_cut[[3]], hybrid_cut[[4]], hybrid_cut[[5]]), ncol = 3),
dendroLabels = FALSE, main = NULL, lwd = 0.5, ylab = "", yaxt = "n",
groupLabels = c("Deep Split: 2\n(114 Syllable Types)", "Deep Split: 3\n(596 Syllable Types)", "Deep Split: 4\n(1,646 Syllable Types)"),
hang = -1, addGuide = FALSE, marAll = c(0.3, 4.5, 0, 0), cex.colorLabels = 0.55)
dev.off()
library(extrafont)
pdf("plots/clustering.pdf", width = 6.8, height = 3.4)
plotDendroAndColors(clustering,
colors = matrix(c(hybrid_cut[[3]], hybrid_cut[[4]], hybrid_cut[[5]]), ncol = 3),
dendroLabels = FALSE, main = NULL, lwd = 0.5, ylab = "", yaxt = "n",
groupLabels = c("Deep Split: 2\n(114 Syllable Types)", "Deep Split: 3\n(596 Syllable Types)", "Deep Split: 4\n(1,646 Syllable Types)"),
hang = -1, addGuide = FALSE, marAll = c(0.3, 4.5, 0, 0), cex.colorLabels = 0.55)
dev.off()
pdf("plots/clustering.pdf", width = 6.8, height = 3.4, family = "Avenir")
?ggsave
cairo_pdf("plots/clustering.pdf", width = 6.8, height = 3.4)
plotDendroAndColors(clustering,
colors = matrix(c(hybrid_cut[[3]], hybrid_cut[[4]], hybrid_cut[[5]]), ncol = 3),
dendroLabels = FALSE, main = NULL, lwd = 0.5, ylab = "", yaxt = "n",
groupLabels = c("Deep Split: 2\n(114 Syllable Types)", "Deep Split: 3\n(596 Syllable Types)", "Deep Split: 4\n(1,646 Syllable Types)"),
hang = -1, addGuide = FALSE, marAll = c(0.3, 4.5, 0, 0), cex.colorLabels = 0.55)
dev.off()
?cairo_pdf
cairo_pdf("plots/clustering.pdf", width = 6.8, height = 3.4, family = "avenir")
plotDendroAndColors(clustering,
colors = matrix(c(hybrid_cut[[3]], hybrid_cut[[4]], hybrid_cut[[5]]), ncol = 3),
dendroLabels = FALSE, main = NULL, lwd = 0.5, ylab = "", yaxt = "n",
groupLabels = c("Deep Split: 2\n(114 Syllable Types)", "Deep Split: 3\n(596 Syllable Types)", "Deep Split: 4\n(1,646 Syllable Types)"),
hang = -1, addGuide = FALSE, marAll = c(0.3, 4.5, 0, 0), cex.colorLabels = 0.55)
dev.off()
pdf("plots/clustering.pdf", width = 6.8, height = 3.4, family = "avenir")
#load library and data
library(ggplot2)
load("data_models/zipf_rf_models.RData")
#create three separate data frames for each level of deep split
lines_a <- data.frame(freqs = c(zipf_rf_models$zipf$ds_2[2, 1]/(zipf_rf_models$data$ds_2$rank^zipf_rf_models$zipf$ds_2[1, 1]),
zipf_rf_models$mand$ds_2[3, 1]/((zipf_rf_models$data$ds_2$rank + zipf_rf_models$mand$ds_2[2, 1])^zipf_rf_models$mand$ds_2[1, 1])),
ranks = rep(zipf_rf_models$data$ds_2$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_2)))
lines_b <- data.frame(freqs = c(zipf_rf_models$zipf$ds_3[2, 1]/(zipf_rf_models$data$ds_3$rank^zipf_rf_models$zipf$ds_3[1, 1]),
zipf_rf_models$mand$ds_3[3, 1]/((zipf_rf_models$data$ds_3$rank + zipf_rf_models$mand$ds_3[2, 1])^zipf_rf_models$mand$ds_3[1, 1])),
ranks = rep(zipf_rf_models$data$ds_3$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_3)))
lines_c <- data.frame(freqs = c(zipf_rf_models$zipf$ds_4[2, 1]/(zipf_rf_models$data$ds_4$rank^zipf_rf_models$zipf$ds_4[1, 1]),
zipf_rf_models$mand$ds_4[3, 1]/((zipf_rf_models$data$ds_4$rank + zipf_rf_models$mand$ds_4[2, 1])^zipf_rf_models$mand$ds_4[1, 1])),
ranks = rep(zipf_rf_models$data$ds_4$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_4)))
#create zipf rank plot for three levels of deep split
rank_plot_a <- ggplot() +
geom_point(data = zipf_rf_models$data$ds_2, aes(x = rank, y = freq), size = 1, stroke = 0, color = "black") +
geom_line(data = lines_a, aes(x = ranks, y = freqs, color = models), linewidth = 0.5) +
scale_x_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
scale_color_manual(values = c("#0072B2", "#D55E00")) +
labs(subtitle = paste0("Deep Split: 2 (", prettyNum(nrow(syl_types[[3]]), big.mark = ","), " Syllable Types)")) +
xlab("Rank") + ylab("Count") + theme(legend.position = "none")
knitr::include_graphics("plots/clustering.png")
knitr::include_graphics("plots/clustering.png")
#load processed data
load("data_models/processed_data.RData")
data <- processed_data$data
#load library and data
library(ggplot2)
load("data_models/zipf_rf_models.RData")
#create three separate data frames for each level of deep split
lines_a <- data.frame(freqs = c(zipf_rf_models$zipf$ds_2[2, 1]/(zipf_rf_models$data$ds_2$rank^zipf_rf_models$zipf$ds_2[1, 1]),
zipf_rf_models$mand$ds_2[3, 1]/((zipf_rf_models$data$ds_2$rank + zipf_rf_models$mand$ds_2[2, 1])^zipf_rf_models$mand$ds_2[1, 1])),
ranks = rep(zipf_rf_models$data$ds_2$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_2)))
lines_b <- data.frame(freqs = c(zipf_rf_models$zipf$ds_3[2, 1]/(zipf_rf_models$data$ds_3$rank^zipf_rf_models$zipf$ds_3[1, 1]),
zipf_rf_models$mand$ds_3[3, 1]/((zipf_rf_models$data$ds_3$rank + zipf_rf_models$mand$ds_3[2, 1])^zipf_rf_models$mand$ds_3[1, 1])),
ranks = rep(zipf_rf_models$data$ds_3$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_3)))
lines_c <- data.frame(freqs = c(zipf_rf_models$zipf$ds_4[2, 1]/(zipf_rf_models$data$ds_4$rank^zipf_rf_models$zipf$ds_4[1, 1]),
zipf_rf_models$mand$ds_4[3, 1]/((zipf_rf_models$data$ds_4$rank + zipf_rf_models$mand$ds_4[2, 1])^zipf_rf_models$mand$ds_4[1, 1])),
ranks = rep(zipf_rf_models$data$ds_4$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_4)))
#create zipf rank plot for three levels of deep split
rank_plot_a <- ggplot() +
geom_point(data = zipf_rf_models$data$ds_2, aes(x = rank, y = freq), size = 1, stroke = 0, color = "black") +
geom_line(data = lines_a, aes(x = ranks, y = freqs, color = models), linewidth = 0.5) +
scale_x_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
scale_color_manual(values = c("#0072B2", "#D55E00")) +
labs(subtitle = paste0("Deep Split: 2 (", prettyNum(nrow(syl_types[[3]]), big.mark = ","), " Syllable Types)")) +
xlab("Rank") + ylab("Count") + theme(legend.position = "none")
knitr::include_graphics("plots/clustering.png")
#load processed data
load("data_models/processed_data.RData")
data <- processed_data$data
#load library
library(brms)
library(ggplot2)
load("data_models/zipf_rf_models.RData")
#load processed data and rename
load("data_models/processed_data.RData")
data <- processed_data$data
syl_types <- processed_data$syl_types
rm(processed_data)
#create three separate data frames for each level of deep split
lines_a <- data.frame(freqs = c(zipf_rf_models$zipf$ds_2[2, 1]/(zipf_rf_models$data$ds_2$rank^zipf_rf_models$zipf$ds_2[1, 1]),
zipf_rf_models$mand$ds_2[3, 1]/((zipf_rf_models$data$ds_2$rank + zipf_rf_models$mand$ds_2[2, 1])^zipf_rf_models$mand$ds_2[1, 1])),
ranks = rep(zipf_rf_models$data$ds_2$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_2)))
lines_b <- data.frame(freqs = c(zipf_rf_models$zipf$ds_3[2, 1]/(zipf_rf_models$data$ds_3$rank^zipf_rf_models$zipf$ds_3[1, 1]),
zipf_rf_models$mand$ds_3[3, 1]/((zipf_rf_models$data$ds_3$rank + zipf_rf_models$mand$ds_3[2, 1])^zipf_rf_models$mand$ds_3[1, 1])),
ranks = rep(zipf_rf_models$data$ds_3$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_3)))
lines_c <- data.frame(freqs = c(zipf_rf_models$zipf$ds_4[2, 1]/(zipf_rf_models$data$ds_4$rank^zipf_rf_models$zipf$ds_4[1, 1]),
zipf_rf_models$mand$ds_4[3, 1]/((zipf_rf_models$data$ds_4$rank + zipf_rf_models$mand$ds_4[2, 1])^zipf_rf_models$mand$ds_4[1, 1])),
ranks = rep(zipf_rf_models$data$ds_4$rank, 2),
models = rep(c("Zipf  ", "Zipf-Mandelbrot"), each = nrow(zipf_rf_models$data$ds_4)))
#create zipf rank plot for three levels of deep split
rank_plot_a <- ggplot() +
geom_point(data = zipf_rf_models$data$ds_2, aes(x = rank, y = freq), size = 1, stroke = 0, color = "black") +
geom_line(data = lines_a, aes(x = ranks, y = freqs, color = models), linewidth = 0.5) +
scale_x_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
scale_color_manual(values = c("#0072B2", "#D55E00")) +
labs(subtitle = paste0("Deep Split: 2 (", prettyNum(nrow(syl_types[[3]]), big.mark = ","), " Syllable Types)")) +
xlab("Rank") + ylab("Count") + theme(legend.position = "none")
rank_plot_b <- ggplot() +
geom_point(data = zipf_rf_models$data$ds_3, aes(x = rank, y = freq), size = 1, stroke = 0, color = "black") +
geom_line(data = lines_b, aes(x = ranks, y = freqs, color = models), linewidth = 0.5) +
scale_x_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
scale_color_manual(values = c("#0072B2", "#D55E00")) +
labs(subtitle = paste0("Deep Split: 3 (", prettyNum(nrow(syl_types[[4]]), big.mark = ","), " Syllable Types)")) +
xlab("Rank") + ylab("Count") + theme(legend.position = "none")
rank_plot_c <- ggplot() +
geom_point(data = zipf_rf_models$data$ds_4, aes(x = rank, y = freq), size = 1, stroke = 0, color = "black") +
geom_line(data = lines_c, aes(x = ranks, y = freqs, color = models), linewidth = 0.5) +
scale_x_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(trans = "log10", labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
scale_color_manual(values = c("#0072B2", "#D55E00")) +
labs(subtitle = paste0("Deep Split: 4 (", prettyNum(nrow(syl_types[[5]]), big.mark = ","), " Syllable Types)")) +
xlab("Rank") + ylab("Count") + theme(legend.position = "none")
legend_plot <- ggplot() + geom_line(data = lines_c, aes(x = ranks, y = freqs, color = models), linewidth = 0.5) +
theme_linedraw(base_size = 8, base_family = "Avenir") + scale_color_manual(values = c("#0072B2", "#D55E00")) +
theme(legend.title = element_blank(), legend.position = "bottom")
cairo_pdf("plots/rank_count_small.pdf", width = 3.4, height = 3.4, family = "avenir")
cowplot::plot_grid(rank_plot_b + labs(subtitle = NULL), cowplot::get_legend(legend_plot), nrow = 2, rel_heights = c(1, 0.1))
dev.off()
#load packages
library(ggplot2)
library(see)
#load data
load("data_models/menz_models.RData")
simple_null_slopes <- data.frame(slopes = menz_models$simple_null$samples, y = factor(1))
prod_null_slopes <- data.frame(slopes = menz_models$prod_null$samples, y = factor(1))
actual_slopes <- data.frame(slopes = menz_models$actual$samples, y = factor(1))
model <- menz_models$actual$estimates
load("data_models/processed_data.RData")
data <- processed_data$data
#get predicted values after accounting for scaling of predictor
scaled_vals <- (seq(min(data$song_length), max(data$song_length), 0.5) - mean(data$song_length))/sd(data$song_length)
preds <- data.frame(pred_x = seq(min(data$song_length), max(data$song_length), 0.5), pred_y = sapply(scaled_vals, function(x){exp(model[1, 1] + model[2, 1]*x)}))
#get the normal plot of data with best fit line
norm_plot <- ggplot(data, aes(x = song_length, y = duration)) +
geom_point(colour = scales::alpha("black", 0.2), size = 1, stroke = 0) +
geom_line(data = preds, aes(x = pred_x, y = pred_y), color = "#D55E00", linewidth = 0.5) +
theme_linedraw(base_size = 8, base_family = "Avenir") +
xlab("# of Syllables per Song") + ylab("Syllable Duration (ms)")
#get the plot of the observed slopes compared to the null markov slopes
slope_plot <- ggplot() +
geom_violin(data = simple_null_slopes, aes(x = y, y = slopes), color = "#0072B2", fill = "transparent") +
geom_violin(data = prod_null_slopes, aes(x = y, y = slopes), color = "#009E73", fill = "transparent") +
geom_violin(data = actual_slopes, aes(x = y, y = slopes), color = "#D55E00", fill = "transparent") +
theme_linedraw(base_size = 8, base_family = "Avenir") +
geom_hline(yintercept = 0, lty = "dashed") +
scale_y_continuous(limits = c(-0.085, 0.02), expand = c(0, 0)) +
scale_x_discrete(label = c("")) +
ylab("Slope") + xlab("") +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(), legend.position = "right")
#create legend for plotting
dummy_data <- data.frame(x = rep(1:10, 3), y = rep(1:10, 3), group = rep(c("Simple Null     ", "Production Null     ", "Observed"), each = 10))
legend <- ggplot(dummy_data, aes(x = x, y = y, color = group)) + geom_line() + theme_linedraw(base_size = 8, base_family = "Avenir") +
scale_color_manual(name = NULL, breaks = c("Simple Null     ", "Production Null     ", "Observed"), values = c("#0072B2", "#009E73", "#D55E00")) +
theme(legend.position = "bottom")
cairo_pdf("plots/menzerath.pdf", width = 3.4, height = 2.2, family = "avenir")
cowplot::plot_grid(cowplot::plot_grid(norm_plot, slope_plot, nrow = 1, rel_widths = c(1, 0.3)),
cowplot::get_legend(legend), nrow = 2, rel_heights = c(1, 0.16))
dev.off()
#load libraries
library(igraph)
library(ggnetwork)
#load data
load("data_models/small_world.RData")
load("data_models/processed_data.RData")
data <- processed_data$data
syl_types <- processed_data$syl_types
rm(processed_data)
#get number of unique songs
unique_songs <- unique(data$song)
#get unique individuals
unique_inds <- unique(data$individual)
#aesthetically-pleasing examples: 36, 37, 109, 127, 139, 224, 228, 229, 244, 252, 267, 272, 273, 276, 282, 285, 308, 310, 313, 318, 324
#best examples: 36, 109, 224, 244, 282,
#get sequences from target individual for plotting
rep_sequences <- do.call(rbind, lapply(36, function(i){
songs <- unique(data$song[which(data$individual == unique_inds[i])])
sequences <- do.call(rbind, lapply(songs, function(j){
temp <- data$cluster_3[which(data$individual == unique_inds[i])]
matrix(c(temp[1:(length(temp)-1)], temp[2:length(temp)]), ncol = 2)
}))
return(sequences)
}))
#process sequences and convert into an igraph object
rep_sequences <- matrix(as.numeric(factor(rep_sequences)), ncol = 2)
rep_graph <- simplify(graph_from_edgelist(unique(rep_sequences), directed = TRUE))
#set random seed and create network plot
set.seed(12345)
rep_net_plot <- ggplot(fortify(model = rep_graph, layout = igraph::with_kk()), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_nodes(size = 1.5) + geom_edges(arrow = arrow(length = unit(1, "pt"), type = "closed"), size = 0.2, curvature = 0) + theme_blank(base_size = 8, base_family = "Avenir") +
labs(subtitle = "Single Repertoire")
#get all of the sequences for global network plot
full_sequences <- do.call(rbind, lapply(unique_songs, function(i){
temp <- data$cluster_3[which(data$song == i)]
return(matrix(c(temp[1:(length(temp)-1)], temp[2:length(temp)]), ncol = 2))
}))
#process sequences and convert into an igraph object
full_sequences <- matrix(as.numeric(factor(full_sequences)), ncol = 2)
full_graph <- simplify(graph_from_edgelist(unique(full_sequences), directed = TRUE))
#set random seed and create network plot
set.seed(123)
full_net_plot <- ggplot(fortify(model = full_graph, layout = igraph::nicely()), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_nodes(color = scales::alpha("black", 0.4), size = 1, stroke = 0) + geom_edges(curvature = 0, size = 0.1, color = scales::alpha("black", 0.2)) + theme_blank(base_size = 8, base_family = "Avenir") +
labs(subtitle = "All Sequences")
#set number of iterations
plot_iters <- 1000
#construct distribution of swi at each value of deep split
swi_plots <- lapply(1:5, function(x){
plot_data <- data.frame(swi = c(small_world[[x]]$structured[1:plot_iters], small_world[[x]]$null[1:plot_iters]), model = factor(c(rep("Actual Sequences", plot_iters), rep("Pseudorandom Sequences        ", plot_iters)), levels = c("Pseudorandom Sequences        ", "Actual Sequences")))
ggplot(plot_data, aes(x = swi, fill = factor(model))) +
geom_histogram(binwidth = 0.02) +
theme_linedraw(base_size = 8, base_family = "Avenir") + geom_vline(xintercept = 1, linetype = "dashed", lwd = 0.3) +
scale_x_continuous(expand = c(0, 0), limits = c(0.7, 12),
breaks = c(0.7, 1, 2, 4, 6, 8, 10, 12),
labels = c(0.7, 1, 2, 4, 6, 8, 10, 12),
trans = "log2", minor_breaks = seq(1, 12, 1)) +
scale_fill_manual(values = c("#0072B2", "#D55E00")) +
theme(legend.title = element_blank(), legend.position = "bottom",
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
legend.background = element_rect(fill = "transparent"))
})
cairo_pdf("plots/small_world.pdf", width = 6.8, height = 3.4, family = "avenir")
left_panel <- cowplot::plot_grid(ggplot() + theme_void(), rep_net_plot, full_net_plot, ncol = 1, rel_heights = c(0.13, 1, 1))
right_panel <- cowplot::plot_grid(
swi_plots[[3]] + theme(legend.position = "none") + ylab(NULL) + xlab(NULL) +
scale_y_continuous(breaks = c(0, 420)) +
labs(subtitle = labs(subtitle = paste0("Deep Split: 2 (", prettyNum(nrow(syl_types[[3]]), big.mark = ","), " Syllable Types)"))),
swi_plots[[4]] + theme(legend.position = "none") + ylab(NULL) + xlab(NULL) +
scale_y_continuous(breaks = c(0, 660)) +
labs(subtitle = labs(subtitle = paste0("Deep Split: 3 (", prettyNum(nrow(syl_types[[4]]), big.mark = ","), " Syllable Types)"))),
swi_plots[[5]] + ylab(NULL) + xlab("Small-Worldness Index") +
scale_y_continuous(breaks = c(0, 440)) +
labs(subtitle = labs(subtitle = paste0("Deep Split: 4 (", prettyNum(nrow(syl_types[[5]]), big.mark = ","), " Syllable Types)"))),
ncol = 1, rel_heights = c(1, 1, 1.6))
cowplot::plot_grid(left_panel, right_panel, labels = c("A", "B"), rel_widths = c(0.6, 1))
dev.off()
#load library
library(ggplot2)
#load data
load("data_models/mi_simulated.RData")
load("data_models/mi_data.RData")
load("data_models/mi_models.RData")
load("data_models/processed_data.RData")
data <- processed_data$data
#create function for the composite decay model
composite_decay <- function(dist, a, b, c, d, f){
return((a*exp((-dist)*b)) + (c*(dist^(-d))) + f)
}
#read in diagrams
hierarchy_diagram <- png::readPNG("diagrams/hierarchy.png")
markov_diagram <- png::readPNG("diagrams/markov.png")
composite_diagram <- png::readPNG("diagrams/composite.png")
#construct plot of sainburg's data from lin and tegmark's hierarchical model
heir_plot <- ggplot(mi_simulated[which(mi_simulated$group == "heirarchy"), ], aes(x = x, y = y)) +
scale_x_continuous(trans = "log10", limits = c(1, 100)) +
scale_y_continuous(trans = "log10", limits = c(10e-4, 10e1), labels = scales::trans_format("log10", scales::math_format(10^.x))) +
geom_point(color = "black", size = 1, stroke = 0) +
xlab("Distances") + ylab("MI (Bits)") +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
theme(plot.title = element_text(size = 8), plot.subtitle = element_text(size = 6)) +
labs(title = "Hierarchical Model (Power-Law)", subtitle = "Lin & Tegmark (2017) via Sainburg et al. (2019)") +
cowplot::draw_image(hierarchy_diagram, x = 1.17, y = 0.3, scale = 2.4)
#construct plot of sainburg's data from katahira et al.'s "okada" markov model: https://github.com/timsainb/ParallelsBirdsongLanguagePaper/blob/master/notebooks/models/3.0-fit-model-MI-plot-decay.ipynb
markov_plot <- ggplot(mi_simulated[which(mi_simulated$group == "markov"), ], aes(x = x, y = y)) +
scale_x_continuous(trans = "log10", limits = c(1, 100)) +
scale_y_continuous(trans = "log10", limits = c(10e-4, 10e1), labels = scales::trans_format("log10", scales::math_format(10^.x))) +
geom_point(color = "black", size = 1, stroke = 0) +
xlab("Distances") + ylab("MI (Bits)") +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
theme(plot.title = element_text(size = 8), plot.subtitle = element_text(size = 6)) +
labs(title = "Markov Model (Exponential)", subtitle = "Katahira et al. (2011) via Sainburg et al. (2019)") +
cowplot::draw_image(markov_diagram, x = 1.17, y = 0.3, scale = 2.4)
#construct plot of sainburg's data from their combined model
combined_plot <- ggplot(mi_simulated[which(mi_simulated$group == "combined"), ], aes(x = x, y = y)) +
scale_x_continuous(trans = "log10", limits = c(1, 100)) +
scale_y_continuous(trans = "log10", limits = c(10e-4, 10e1), labels = scales::trans_format("log10", scales::math_format(10^.x))) +
geom_point(color = "black", size = 1, stroke = 0) +
xlab("Distances") + ylab("MI (Bits)") +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
theme(plot.title = element_text(size = 8), plot.subtitle = element_text(size = 6)) +
labs(title = "Composite Model", subtitle = "Sainburg et al. (2019)") +
cowplot::draw_image(composite_diagram, x = 1.17, y = 0.3, scale = 2.4)
#construct mutual information plot for each level of deep split
mi_plots <- lapply(1:3, function(i){
#create data frame to store model fits for plotting
fit_data <- data.frame(dist = seq(1, 100, 0.1))
#add each model from the fitted parameters of the composite model (as per sainburg) from deep split of 3
fit_data$exp_fit <- composite_decay(fit_data$dist, mi_models[[i]]$composite_fit[1, 1], mi_models[[i]]$composite_fit[2, 1], 0, 0, 0)
fit_data$pl_fit <- composite_decay(fit_data$dist, 0, 0, mi_models[[i]]$composite_fit[3, 1], mi_models[[i]]$composite_fit[4, 1], 0)
fit_data$comp_fit <- composite_decay(fit_data$dist, mi_models[[i]]$composite_fit[1, 1], mi_models[[i]]$composite_fit[2, 1], mi_models[[i]]$composite_fit[3, 1], mi_models[[i]]$composite_fit[4, 1],0)
#use appropriate syllables
if(i == 1){data$syls <- data$cluster_2}
if(i == 2){data$syls <- data$cluster_3}
if(i == 3){data$syls <- data$cluster_4}
#set custom limits
if(i == 1){limits <- c(0.0001, 0.15)}
if(i == 2){limits <- c(0.0001, 1)}
if(i == 3){limits <- c(0.001, 1)}
#set custom colors
if(i == 1){color <- "#009E73"}
if(i == 2){color <- "#D55E00"}
if(i == 3){color <- "#0072B2"}
#return plot with best fit curves
return(ggplot(mi_data[[i]], aes(x = dist, y = mi)) +
geom_point(color = color, size = 1, stroke = 0) +
scale_x_continuous(trans = "log10", limits = c(1, 100)) +
scale_y_continuous(trans = "log10", limits = limits, labels = scales::trans_format("log10", scales::math_format(10^.x))) +
geom_line(fit_data, mapping = aes(x = dist, y = comp_fit, linetype = "Composite Model     "), color = scales::alpha(color, 1)) +
geom_line(fit_data, mapping = aes(x = dist, y = exp_fit, linetype = "Exponential Term    "), color = scales::alpha(color, 1)) +
geom_line(fit_data, mapping = aes(x = dist, y = pl_fit, linetype = "Power-Law Term"), color = scales::alpha(color, 1)) +
scale_linetype_manual(name = NULL, values = c("Composite Model     " = "solid", "Exponential Term    " = "dashed", "Power-Law Term" = "dotted")) +
xlab("Distances") + ylab("MI (Bits)") +
theme_linedraw(base_size = 8, base_family = "Avenir") + annotation_logticks(size = 0.3) +
labs(subtitle = paste0("Deep Split: ", i + 2, " (", prettyNum(length(unique(data$syls)), big.mark = ","), " Syllable Types)")) +
theme(legend.position = "bottom") + guides(linetype = guide_legend(override.aes = list(color = "black"))))
})
cairo_pdf("plots/mut_info.pdf", width = 6.8, height = 3.4, family = "avenir")
cowplot::plot_grid(cowplot::plot_grid(heir_plot + xlab(""), markov_plot + ylab(""), combined_plot + xlab("") + ylab(""), nrow = 1),
cowplot::plot_grid(mi_plots[[1]] + theme(legend.position = "none") + xlab(""),
mi_plots[[2]] + theme(legend.position = "none") + ylab(""),
mi_plots[[3]] + theme(legend.position = "none") + xlab("") + ylab(""), nrow = 1),
cowplot::get_legend(mi_plots[[1]]),
nrow = 3, labels = c("A", "B", ""), rel_heights = c(0.9, 1, 0.15))
dev.off()
